/// Returns the product of the value passed with number, it's mainly used by the core for `spacing` and `s` mixins
/// @author <a href="http://twitter.com/vttrx">Vittorio Vittori</a>
/// @group Frontsize functions
/// @access public
/// @param {int} $multiplier [1] - The multiplier for theme config's global var `$spacing`
/// @example scss SCSS example
///   .selector {
///       $value: 20px;
///       padding-top: scaleValue($value, 2);
///       padding-bottom: scaleValue($value, 0.5);
///   }
/// @example css CSS generated
///   .selector {
///       padding-top: 40px;
///       padding-bottom: 10px;
///   }

@function scaleValue($value, $scale) {
    @return round($value * $scale);
}

/// Returns the product of theme config's global var `$spacing` with the integer passed
/// @author <a href="http://twitter.com/vttrx">Vittorio Vittori</a>
/// @group Frontsize functions
/// @access public
/// @param {int} $multiplier [1] - The multiplier for theme config's global var `$spacing`
/// @example scss The default value of spacing pamameter si `1`
///   .selector {
///       // we have set theme config core var $spacing: 30px;
///       padding-top: spacing();
///       padding-bottom: spacing(2);
///       padding-right: spacing(0.5);
///       padding-left: spacing(0.5);
///   }
/// @example css CSS generated if `$spacing` is `15px`
///   .selector {
///       padding-top: 30px;
///       padding-bottom: 60px;
///       padding-right: 15px;
///       padding-left: 15px;
///   }

@function spacing($scale:1) {
    @return scaleValue($spacing, $scale);
}

/// Alias for `spacing` function to a lesser verbose usage
/// @author <a href="http://twitter.com/vttrx">Vittorio Vittori</a>
/// @group Frontsize functions
/// @access public
/// @param {int} $multiplier [1] - The multiplier for theme config's global var `$spacing`
/// @example scss The default value of spacing pamameter si `1`
///   .selector-s {
///     // we have set theme config core var $spacing: 30px;
///     padding-top: s(2);
///     padding-bottom: s(2, 10px);
///     padding-right: s(0.5);
///     padding-left: s();
///   }
/// @example css CSS generated if `$spacing` is `15px`
///   .selector {
///     padding-top: 60px;
///     padding-bottom: 20px;
///     padding-right: 15px;
///     padding-left: 30px;
///   }

@function s($scale:1, $value:false) {
    @if $value == false {
        @return spacing($scale);
    } @else {
        @return scaleValue($value, $scale);
    }
}

/// Returns a percentage fraction of two integers, it's useful to define custom column sizes
/// @author <a href="http://twitter.com/vttrx">Vittorio Vittori</a>
/// @group Frontsize functions
/// @access public
/// @param {int} $step       [required] - The current step to be converted in percentage
/// @param {int} $totalSteps [12]       - The total steps, 12 by default
/// @example scss SCSS example
///   .selector {
///       width: step(4, 12);
///   }
/// @example css CSS generated
///   .selector {
///       width: 33.33333%;
///   }
/// @example scss SCSS example
///   .selector {
///       width: step(3);
///   }
/// @example css CSS generated
///   .selector {
///       width: 25%;
///   }

@function step($step, $totalSteps:12) {
    @return ($step * 100 / $totalSteps) * 1%;
}

@function _values($value) {
    @if $use-css-prefix == true {
        @if $value == "filter" {
            @return "filter" "-webkit-filter";
        } @elseif $value == "transform" {
            @return "transform" "-webkit-transform";
        } @elseif $value == "box-shadow" {
            @return "box-shadow" "-webkit-box-shadow" "-khtml-box-shadow" "-moz-box-shadow" "-ms-box-shadow" "-o-box-shadow";
        } @else {
            @return $value;
        }
    } @else {
        @return $value;
    }
}

@function _clean($value) {
    @if $value == 0px or $value == 0% or $value == 0em or $value == 0rem {
        @return 0;
    } @else {
        @return $value;
    }
}
